{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","social","avatar","childImageSharp","fixed","className","alt","name","imgStyle","borderRadius","summary","href","twitter","postLayoutGrid","max","offset","col","xlg","lg","md","sm","BlogPostTemplate","post","location","markdownRemark","previous","next","console","log","title","frontmatter","description","excerpt","gridPlacement","itemScope","itemType","itemProp","date","style","display","flexWrap","justifyContent","listStyle","padding","slug","rel","dangerouslySetInnerHTML","__html","html"],"mappings":"8FAAA,0DAkEeA,IAvDH,WAAO,IAAD,QACVC,EAAOC,yBAAe,aAwBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAM,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBC,OAEjCC,EAASN,SAAH,UAAGA,EAAMM,cAAT,iBAAG,EAAcC,uBAAjB,aAAG,EAA+BC,MAE9C,OACE,yBAAKC,UAAU,OACZH,GACC,kBAAC,IAAD,CACEE,MAAOF,EACPI,KAAKR,aAAA,EAAAA,EAAQS,OAAR,GACLF,UAAU,aACVG,SAAU,CACRC,aAAa,UAIlBX,aAAA,EAAAA,EAAQS,OACP,yCACa,gCAAST,EAAOS,MAD7B,KAC6CT,aAAA,EAAAA,EAAQY,UAAW,KADhE,IAGE,uBAAGC,KAAI,yBAAyBV,aAAA,EAAAA,EAAQW,UAAR,KAAhC,yC,kCCzDV,0FAQMC,EAAiB,CACrBC,IAAK,CACHC,OAAQ,IACRC,IAAK,KAEPC,IAAK,CACHF,OAAQ,IACRC,IAAK,MAEPE,GAAI,CACFH,OAAQ,IACRC,IAAK,MAEPG,GAAI,CACFJ,OAAQ,IACRC,IAAK,KAEPI,GAAI,CACFJ,IAAK,QA8EMK,UA1EU,SAAC,GAAwB,IAAtBzB,EAAqB,EAArBA,KACpB0B,GADyC,EAAfC,SACnB3B,EAAK4B,gBACVC,EAAmB7B,EAAnB6B,SAAUC,EAAS9B,EAAT8B,KAGlB,OAFAC,QAAQC,IAAIhC,GAGV,yBAAKS,UAAU,QACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEwB,MAAOP,EAAKQ,YAAYD,MACxBE,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAGpD,yBAAK3B,UAAU,YACb,6BACEA,UAAW4B,YAAcpB,EAAgB,0BACzCqB,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAI9B,UAAU,gBAAgB+B,SAAS,YACpCd,EAAKQ,YAAYD,OAEpB,uBAAGxB,UAAU,gBAAgBiB,EAAKQ,YAAYO,OAEhD,yBAAKhC,UAAU,eACb,wBACEiC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGlB,GACC,uBACEd,KACE,8BAAgCc,EAASK,YAAYc,KAEvDC,IAAI,QAJN,KAMKpB,EAASK,YAAYD,QAI9B,4BACGH,GACC,uBACEf,KAAM,8BAAgCe,EAAKI,YAAYc,KACvDC,IAAI,QAEHnB,EAAKI,YAAYD,MAJpB,SAWR,6BACExB,UAAU,eACVyC,wBAAyB,CAAEC,OAAQzB,EAAK0B,MACxCZ,SAAS,gBAEX,gCACE,kBAAC,IAAD","file":"component---src-templates-blog-post-js-0be6de79648ede6410d8.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50, quality: 95) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  const avatar = data?.avatar?.childImageSharp?.fixed\n\n  return (\n    <div className=\"bio\">\n      {avatar && (\n        <Image\n          fixed={avatar}\n          alt={author?.name || ``}\n          className=\"bio-avatar\"\n          imgStyle={{\n            borderRadius: `50%`,\n          }}\n        />\n      )}\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport SEO from \"../components/seo\";\nimport { gridPlacement } from \"./../components/utilities\";\nimport { BlogFooter, BlogHeader } from \"./../components\";\n\nconst postLayoutGrid = {\n  max: {\n    offset: \"4\",\n    col: \"8\",\n  },\n  xlg: {\n    offset: \"3\",\n    col: \"10\",\n  },\n  lg: {\n    offset: \"3\",\n    col: \"10\",\n  },\n  md: {\n    offset: \"1\",\n    col: \"6\",\n  },\n  sm: {\n    col: \"col\",\n  },\n};\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const { previous, next } = data;\n  console.log(data);\n\n  return (\n    <div className=\"blog\">\n      <BlogHeader />\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n\n      <div className=\"bx--grid\">\n        <article\n          className={gridPlacement(postLayoutGrid, \"bx--no-gutter blogPost\")}\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h1 className=\"blogPostTitle\" itemProp=\"headline\">\n              {post.frontmatter.title}\n            </h1>\n            <p className=\"blogPostDate\">{post.frontmatter.date}</p>\n          </header>\n          <nav className=\"blogPostNav\">\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <a\n                    href={\n                      \"http://localhost:8000/blog/\" + previous.frontmatter.slug\n                    }\n                    rel=\"prev\"\n                  >\n                    ← {previous.frontmatter.title}\n                  </a>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <a\n                    href={\"http://localhost:8000/blog/\" + next.frontmatter.slug}\n                    rel=\"next\"\n                  >\n                    {next.frontmatter.title} →\n                  </a>\n                )}\n              </li>\n            </ul>\n          </nav>\n\n          <section\n            className=\"blogPostBody\"\n            dangerouslySetInnerHTML={{ __html: post.html }}\n            itemProp=\"articleBody\"\n          />\n          <footer>\n            <BlogFooter />\n          </footer>\n        </article>\n      </div>\n    </div>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        slug\n        path\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        slug\n        path\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}